/*
White Label Communications CPaas API Documentation

Testing ProvisioningAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProvisioningAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyFamilyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string
		var family string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyFamilyGet(context.Background(), brand, family).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyFamilyModelGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string
		var family string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyFamilyModelGet(context.Background(), brand, family).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyFamilyModelModelGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string
		var family string
		var model string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyFamilyModelModelGet(context.Background(), brand, family, model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyFamilyModelModelTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string
		var family string
		var model string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyFamilyModelModelTemplateGet(context.Background(), brand, family, model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string
		var family string
		var model string
		var template string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(context.Background(), brand, family, model, template).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandFamilyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandFamilyGet(context.Background(), brand).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandBrandGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brand string

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandBrandGet(context.Background(), brand).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApBrandGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApBrandGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningAPIService V1ApConfigfileGeneratePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningAPI.V1ApConfigfileGeneratePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
