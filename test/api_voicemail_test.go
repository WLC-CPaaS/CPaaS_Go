/*
White Label Communications CPaas API Documentation

Testing VoicemailAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_VoicemailAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailGet(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailPost(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDDelete(context.Background(), accountID, voicemailID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDGet(context.Background(), accountID, voicemailID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageGet(context.Background(), accountID, voicemailID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string
		var messageID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(context.Background(), accountID, voicemailID, messageID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string
		var messageID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(context.Background(), accountID, voicemailID, messageID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string
		var messageID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(context.Background(), accountID, voicemailID, messageID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string
		var messageID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(context.Background(), accountID, voicemailID, messageID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string
		var messageID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(context.Background(), accountID, voicemailID, messageID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDMessagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDMessagePost(context.Background(), accountID, voicemailID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailAPIService V1AccountAccountIDVoicemailVoicemailIDPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var voicemailID string

		resp, httpRes, err := apiClient.VoicemailAPI.V1AccountAccountIDVoicemailVoicemailIDPut(context.Background(), accountID, voicemailID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
