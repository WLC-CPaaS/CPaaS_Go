/*
White Label Communications CPaas API Documentation

Testing CallQueueManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CallQueueManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueueGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueueGet(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueuePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueuePost(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueueQueueIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var queueID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueueQueueIDDelete(context.Background(), accountID, queueID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueueQueueIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var queueID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueueQueueIDGet(context.Background(), accountID, queueID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueueQueueIDPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var queueID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueueQueueIDPut(context.Background(), accountID, queueID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDCallqueueQueueIDStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var queueID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDCallqueueQueueIDStatusGet(context.Background(), accountID, queueID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDQueuerolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDQueuerolesGet(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallQueueManagementAPIService V1AccountAccountIDQueuerolesQueueIDPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var queueID string

		resp, httpRes, err := apiClient.CallQueueManagementAPI.V1AccountAccountIDQueuerolesQueueIDPost(context.Background(), accountID, queueID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
