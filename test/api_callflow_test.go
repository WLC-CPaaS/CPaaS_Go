/*
White Label Communications CPaas API Documentation

Testing CallflowAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CallflowAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallflowAPIService V1AccountAccountIDCallflowCallflowIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var callflowID string

		resp, httpRes, err := apiClient.CallflowAPI.V1AccountAccountIDCallflowCallflowIDDelete(context.Background(), accountID, callflowID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallflowAPIService V1AccountAccountIDCallflowCallflowIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var callflowID string

		resp, httpRes, err := apiClient.CallflowAPI.V1AccountAccountIDCallflowCallflowIDGet(context.Background(), accountID, callflowID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallflowAPIService V1AccountAccountIDCallflowCallflowIDPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string
		var callflowID string

		resp, httpRes, err := apiClient.CallflowAPI.V1AccountAccountIDCallflowCallflowIDPut(context.Background(), accountID, callflowID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallflowAPIService V1AccountAccountIDCallflowGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.CallflowAPI.V1AccountAccountIDCallflowGet(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallflowAPIService V1AccountAccountIDCallflowPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountID string

		resp, httpRes, err := apiClient.CallflowAPI.V1AccountAccountIDCallflowPost(context.Background(), accountID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
