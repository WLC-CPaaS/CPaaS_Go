/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapi;

import java.util.Objects;
import java.util.Arrays;
import bytes;
import fmt;

/**
 * ServiceWebhookEdit
 */
@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceWebhookEdit {
  /**
   * Gets or Sets CallbackMethod
   */
  public enum CALLBACK_METHOD {
    POST(string.valueOf("POST")),
    
    PUT(string.valueOf("PUT"));

    private string value;

    CALLBACK_METHOD(string value) {
      this.value = value;
    }

    public string getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CALLBACK_METHOD fromValue(string value) {
      for (CALLBACK_METHOD b : CALLBACK_METHOD.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @.annotation.Nonnull
  private CALLBACK_METHOD CallbackMethod;

  @.annotation.Nonnull
  private string CallbackUrl;

  @.annotation.Nullable
  private map[string]interface{} Data;

  @.annotation.Nullable
  private bool IsActive;

  @.annotation.Nonnull
  private string Title;

  @.annotation.Nonnull
  private string WebhookType;

  public ServiceWebhookEdit() {
  }

  public ServiceWebhookEdit CallbackMethod(@.annotation.Nonnull CALLBACK_METHOD CallbackMethod) {
    
    this.CallbackMethod = CallbackMethod;
    return this;
  }

  /**
   * Get CallbackMethod
   * @return CallbackMethod
   */
  @.annotation.Nonnull

  public CALLBACK_METHOD GetCallbackMethod() {
    return CallbackMethod;
  }


  public void setCallbackMethod(@.annotation.Nonnull CALLBACK_METHOD CallbackMethod) {
    this.CallbackMethod = CallbackMethod;
  }

  public ServiceWebhookEdit CallbackUrl(@.annotation.Nonnull string CallbackUrl) {
    
    this.CallbackUrl = CallbackUrl;
    return this;
  }

  /**
   * Get CallbackUrl
   * @return CallbackUrl
   */
  @.annotation.Nonnull

  public string GetCallbackUrl() {
    return CallbackUrl;
  }


  public void setCallbackUrl(@.annotation.Nonnull string CallbackUrl) {
    this.CallbackUrl = CallbackUrl;
  }

  public ServiceWebhookEdit Data(@.annotation.Nullable map[string]interface{} Data) {
    
    this.Data = Data;
    return this;
  }

  public ServiceWebhookEdit putDataItem(String key, interface{} DataItem) {
    if (this.Data == null) {
      this.Data = new HashMap<>();
    }
    this.Data.put(key, DataItem);
    return this;
  }

  /**
   * Get Data
   * @return Data
   */
  @.annotation.Nullable

  public map[string]interface{} GetData() {
    return Data;
  }


  public void setData(@.annotation.Nullable map[string]interface{} Data) {
    this.Data = Data;
  }

  public ServiceWebhookEdit IsActive(@.annotation.Nullable bool IsActive) {
    
    this.IsActive = IsActive;
    return this;
  }

  /**
   * Get IsActive
   * @return IsActive
   */
  @.annotation.Nullable

  public bool getIsActive() {
    return IsActive;
  }


  public void setIsActive(@.annotation.Nullable bool IsActive) {
    this.IsActive = IsActive;
  }

  public ServiceWebhookEdit Title(@.annotation.Nonnull string Title) {
    
    this.Title = Title;
    return this;
  }

  /**
   * Get Title
   * @return Title
   */
  @.annotation.Nonnull

  public string GetTitle() {
    return Title;
  }


  public void setTitle(@.annotation.Nonnull string Title) {
    this.Title = Title;
  }

  public ServiceWebhookEdit WebhookType(@.annotation.Nonnull string WebhookType) {
    
    this.WebhookType = WebhookType;
    return this;
  }

  /**
   * Get WebhookType
   * @return WebhookType
   */
  @.annotation.Nonnull

  public string GetWebhookType() {
    return WebhookType;
  }


  public void setWebhookType(@.annotation.Nonnull string WebhookType) {
    this.WebhookType = WebhookType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceWebhookEdit ServiceWebhookEdit = (ServiceWebhookEdit) o;
    return Objects.equals(this.CallbackMethod, ServiceWebhookEdit.CallbackMethod) &&
        Objects.equals(this.CallbackUrl, ServiceWebhookEdit.CallbackUrl) &&
        Objects.equals(this.Data, ServiceWebhookEdit.Data) &&
        Objects.equals(this.IsActive, ServiceWebhookEdit.IsActive) &&
        Objects.equals(this.Title, ServiceWebhookEdit.Title) &&
        Objects.equals(this.WebhookType, ServiceWebhookEdit.WebhookType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CallbackMethod, CallbackUrl, Data, IsActive, Title, WebhookType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceWebhookEdit {\n");
    sb.append("    CallbackMethod: ").append(toIndentedString(CallbackMethod)).append("\n");
    sb.append("    CallbackUrl: ").append(toIndentedString(CallbackUrl)).append("\n");
    sb.append("    Data: ").append(toIndentedString(Data)).append("\n");
    sb.append("    IsActive: ").append(toIndentedString(IsActive)).append("\n");
    sb.append("    Title: ").append(toIndentedString(Title)).append("\n");
    sb.append("    WebhookType: ").append(toIndentedString(WebhookType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

