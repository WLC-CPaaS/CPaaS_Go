/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProvisioningAPIService ProvisioningAPI service
type ProvisioningAPIService service

type ApiV1ApBrandBrandFamilyFamilyGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	family string
}

func (r ApiV1ApBrandBrandFamilyFamilyGetRequest) Execute() (*ProvisioningDocsDocsFamilyOutputSingle, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyFamilyGetExecute(r)
}

/*
V1ApBrandBrandFamilyFamilyGet Get Family

Retrieve a family's details by the randomly generated ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @param family family
 @return ApiV1ApBrandBrandFamilyFamilyGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyGet(ctx context.Context, brand string, family string) ApiV1ApBrandBrandFamilyFamilyGetRequest {
	return ApiV1ApBrandBrandFamilyFamilyGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
		family: family,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsFamilyOutputSingle
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyGetExecute(r ApiV1ApBrandBrandFamilyFamilyGetRequest) (*ProvisioningDocsDocsFamilyOutputSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsFamilyOutputSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyFamilyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family/{family}"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"family"+"}", url.PathEscape(parameterValueToString(r.family, "family")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandFamilyFamilyModelGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	family string
	modelName *string
	pageSize *int32
	startKey *string
	status *string
}

func (r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) ModelName(modelName string) ApiV1ApBrandBrandFamilyFamilyModelGetRequest {
	r.modelName = &modelName
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) PageSize(pageSize int32) ApiV1ApBrandBrandFamilyFamilyModelGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) StartKey(startKey string) ApiV1ApBrandBrandFamilyFamilyModelGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) Status(status string) ApiV1ApBrandBrandFamilyFamilyModelGetRequest {
	r.status = &status
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) Execute() (*ProvisioningDocsDocsModelOutput, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyFamilyModelGetExecute(r)
}

/*
V1ApBrandBrandFamilyFamilyModelGet Get Model List

Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @param family family
 @return ApiV1ApBrandBrandFamilyFamilyModelGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelGet(ctx context.Context, brand string, family string) ApiV1ApBrandBrandFamilyFamilyModelGetRequest {
	return ApiV1ApBrandBrandFamilyFamilyModelGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
		family: family,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsModelOutput
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelGetExecute(r ApiV1ApBrandBrandFamilyFamilyModelGetRequest) (*ProvisioningDocsDocsModelOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsModelOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyFamilyModelGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family/{family}/model"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"family"+"}", url.PathEscape(parameterValueToString(r.family, "family")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.modelName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model_name", r.modelName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	family string
	model string
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest) Execute() (*ProvisioningDocsDocsModelOutputSingle, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyFamilyModelModelGetExecute(r)
}

/*
V1ApBrandBrandFamilyFamilyModelModelGet Get Model

Retrieve a model's details by the randomly generated ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @param family family
 @param model model
 @return ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelGet(ctx context.Context, brand string, family string, model string) ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest {
	return ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
		family: family,
		model: model,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsModelOutputSingle
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelGetExecute(r ApiV1ApBrandBrandFamilyFamilyModelModelGetRequest) (*ProvisioningDocsDocsModelOutputSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsModelOutputSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyFamilyModelModelGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family/{family}/model/{model}"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"family"+"}", url.PathEscape(parameterValueToString(r.family, "family")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model"+"}", url.PathEscape(parameterValueToString(r.model, "model")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	family string
	model string
	firmware *string
	pageSize *int32
	startKey *string
	status *string
	templateName *string
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) Firmware(firmware string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	r.firmware = &firmware
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) PageSize(pageSize int32) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) StartKey(startKey string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) Status(status string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	r.status = &status
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) TemplateName(templateName string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	r.templateName = &templateName
	return r
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) Execute() (*ProvisioningDocsDocsTemplatesOutput, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyFamilyModelModelTemplateGetExecute(r)
}

/*
V1ApBrandBrandFamilyFamilyModelModelTemplateGet Get Template List

Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @param family family
 @param model model
 @return ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelTemplateGet(ctx context.Context, brand string, family string, model string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest {
	return ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
		family: family,
		model: model,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsTemplatesOutput
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelTemplateGetExecute(r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest) (*ProvisioningDocsDocsTemplatesOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsTemplatesOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyFamilyModelModelTemplateGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family/{family}/model/{model}/template"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"family"+"}", url.PathEscape(parameterValueToString(r.family, "family")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model"+"}", url.PathEscape(parameterValueToString(r.model, "model")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firmware != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firmware", r.firmware, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	}
	if r.templateName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "template_name", r.templateName, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	family string
	model string
	template string
}

func (r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest) Execute() (*ProvisioningDocsDocsTemplateOutputSingle, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetExecute(r)
}

/*
V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet Get Template

Retrieve details about a template for a model by the randomly generated ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @param family family
 @param model model
 @param template template
 @return ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(ctx context.Context, brand string, family string, model string, template string) ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest {
	return ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
		family: family,
		model: model,
		template: template,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsTemplateOutputSingle
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetExecute(r ApiV1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest) (*ProvisioningDocsDocsTemplateOutputSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsTemplateOutputSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"family"+"}", url.PathEscape(parameterValueToString(r.family, "family")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model"+"}", url.PathEscape(parameterValueToString(r.model, "model")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"template"+"}", url.PathEscape(parameterValueToString(r.template, "template")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandFamilyGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
	familyName *string
	pageSize *int32
	startKey *string
	status *string
}

func (r ApiV1ApBrandBrandFamilyGetRequest) FamilyName(familyName string) ApiV1ApBrandBrandFamilyGetRequest {
	r.familyName = &familyName
	return r
}

func (r ApiV1ApBrandBrandFamilyGetRequest) PageSize(pageSize int32) ApiV1ApBrandBrandFamilyGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1ApBrandBrandFamilyGetRequest) StartKey(startKey string) ApiV1ApBrandBrandFamilyGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1ApBrandBrandFamilyGetRequest) Status(status string) ApiV1ApBrandBrandFamilyGetRequest {
	r.status = &status
	return r
}

func (r ApiV1ApBrandBrandFamilyGetRequest) Execute() (*ProvisioningDocsDocsFamilyOutput, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandFamilyGetExecute(r)
}

/*
V1ApBrandBrandFamilyGet Get Family List

Retrieve a list of all families for a brand (e.g., Yealink and Polycom).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand
 @return ApiV1ApBrandBrandFamilyGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyGet(ctx context.Context, brand string) ApiV1ApBrandBrandFamilyGetRequest {
	return ApiV1ApBrandBrandFamilyGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsFamilyOutput
func (a *ProvisioningAPIService) V1ApBrandBrandFamilyGetExecute(r ApiV1ApBrandBrandFamilyGetRequest) (*ProvisioningDocsDocsFamilyOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsFamilyOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandFamilyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}/family"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.familyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "family_name", r.familyName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandBrandGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brand string
}

func (r ApiV1ApBrandBrandGetRequest) Execute() (*ProvisioningDocsDocsBrandOutputSingle, *http.Response, error) {
	return r.ApiService.V1ApBrandBrandGetExecute(r)
}

/*
V1ApBrandBrandGet Get Brand

Retrieve a brand's details by the randomly generated ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brand brand id to retrieve a brand
 @return ApiV1ApBrandBrandGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandBrandGet(ctx context.Context, brand string) ApiV1ApBrandBrandGetRequest {
	return ApiV1ApBrandBrandGetRequest{
		ApiService: a,
		ctx: ctx,
		brand: brand,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsBrandOutputSingle
func (a *ProvisioningAPIService) V1ApBrandBrandGetExecute(r ApiV1ApBrandBrandGetRequest) (*ProvisioningDocsDocsBrandOutputSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsBrandOutputSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandBrandGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand/{brand}"
	localVarPath = strings.Replace(localVarPath, "{"+"brand"+"}", url.PathEscape(parameterValueToString(r.brand, "brand")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApBrandGetRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	brandName *string
	pageSize *int32
	startKey *string
	status *string
}

func (r ApiV1ApBrandGetRequest) BrandName(brandName string) ApiV1ApBrandGetRequest {
	r.brandName = &brandName
	return r
}

func (r ApiV1ApBrandGetRequest) PageSize(pageSize int32) ApiV1ApBrandGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1ApBrandGetRequest) StartKey(startKey string) ApiV1ApBrandGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1ApBrandGetRequest) Status(status string) ApiV1ApBrandGetRequest {
	r.status = &status
	return r
}

func (r ApiV1ApBrandGetRequest) Execute() (*ProvisioningDocsDocsBrandsOutput, *http.Response, error) {
	return r.ApiService.V1ApBrandGetExecute(r)
}

/*
V1ApBrandGet Get Brand

Retrieve a list of all brands (e.g., Yealink and Polycom) by client.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ApBrandGetRequest
*/
func (a *ProvisioningAPIService) V1ApBrandGet(ctx context.Context) ApiV1ApBrandGetRequest {
	return ApiV1ApBrandGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsBrandsOutput
func (a *ProvisioningAPIService) V1ApBrandGetExecute(r ApiV1ApBrandGetRequest) (*ProvisioningDocsDocsBrandsOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsBrandsOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApBrandGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/brand"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.brandName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brand_name", r.brandName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ApConfigfileGeneratePostRequest struct {
	ctx context.Context
	ApiService *ProvisioningAPIService
	params *ModelsGenerateConfigFileRequest
}

// body params to generate config file
func (r ApiV1ApConfigfileGeneratePostRequest) Params(params ModelsGenerateConfigFileRequest) ApiV1ApConfigfileGeneratePostRequest {
	r.params = &params
	return r
}

func (r ApiV1ApConfigfileGeneratePostRequest) Execute() (*ProvisioningDocsDocsConfigFileOutput, *http.Response, error) {
	return r.ApiService.V1ApConfigfileGeneratePostExecute(r)
}

/*
V1ApConfigfileGeneratePost Generate config file

Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ApConfigfileGeneratePostRequest
*/
func (a *ProvisioningAPIService) V1ApConfigfileGeneratePost(ctx context.Context) ApiV1ApConfigfileGeneratePostRequest {
	return ApiV1ApConfigfileGeneratePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningDocsDocsConfigFileOutput
func (a *ProvisioningAPIService) V1ApConfigfileGeneratePostExecute(r ApiV1ApConfigfileGeneratePostRequest) (*ProvisioningDocsDocsConfigFileOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningDocsDocsConfigFileOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningAPIService.V1ApConfigfileGeneratePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ap/configfile/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseProvisionError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
