/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class WebhookAPI {
  private ApiClient apiClient;

  public WebhookAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public WebhookAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Webhook List
   * Retrieve the webhook list in an account.
   * @param accountID Account ID (required)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @param currentPage Current Page (optional)
   * @return ServiceDocsWebhookGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsWebhookGetAll V1WebhookAccountAccountIDGet(string accountID, int32 pageSize, int32 currentPage) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1WebhookAccountAccountIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhook/account/{accountID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("current_page", currentPage));

    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsWebhookGetAll> localVarReturnType = new GenericType<ServiceDocsWebhookGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Webhook
   * Create a webhook for a specific account ID.
   * @param accountID Account ID (required)
   * @param body Webhook data (required)
   * @return ServiceDocsWebhookGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDPost(string accountID, ServiceWebhookAdd body) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1WebhookAccountAccountIDPost");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling V1WebhookAccountAccountIDPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhook/account/{accountID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsWebhookGetSingle> localVarReturnType = new GenericType<ServiceDocsWebhookGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Webhook
   * Remove a webhook identified by its ID for a particular account ID.
   * @param accountID Account ID (required)
   * @param webhookID Webhook ID (required)
   * @return ServiceDocsWebhookDelete
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsWebhookDelete V1WebhookAccountAccountIDWebhookIDDelete(string accountID, int32 webhookID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1WebhookAccountAccountIDWebhookIDDelete");
    }
    
    // verify the required parameter 'webhookID' is set
    if (webhookID == null) {
      throw new ApiException(400, "Missing the required parameter 'webhookID' when calling V1WebhookAccountAccountIDWebhookIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "webhookID" + "\\}", apiClient.escapeString(webhookID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsWebhookDelete> localVarReturnType = new GenericType<ServiceDocsWebhookDelete>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Webhook Details
   * Access details about a single webhook ID for an individual account ID.
   * @param accountID Account ID (required)
   * @param webhookID Webhook ID (required)
   * @return ServiceDocsWebhookGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDGet(string accountID, int32 webhookID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1WebhookAccountAccountIDWebhookIDGet");
    }
    
    // verify the required parameter 'webhookID' is set
    if (webhookID == null) {
      throw new ApiException(400, "Missing the required parameter 'webhookID' when calling V1WebhookAccountAccountIDWebhookIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "webhookID" + "\\}", apiClient.escapeString(webhookID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsWebhookGetSingle> localVarReturnType = new GenericType<ServiceDocsWebhookGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Webhook
   * Update a webhook identified by its ID for a distinct account ID.
   * @param accountID Account ID (required)
   * @param webhookID Webhook ID (required)
   * @param body Updated webhook data (required)
   * @return ServiceDocsWebhookGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsWebhookGetSingle V1WebhookAccountAccountIDWebhookIDPut(string accountID, string webhookID, ServiceWebhookEdit body) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1WebhookAccountAccountIDWebhookIDPut");
    }
    
    // verify the required parameter 'webhookID' is set
    if (webhookID == null) {
      throw new ApiException(400, "Missing the required parameter 'webhookID' when calling V1WebhookAccountAccountIDWebhookIDPut");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling V1WebhookAccountAccountIDWebhookIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhook/account/{accountID}/{webhookID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "webhookID" + "\\}", apiClient.escapeString(webhookID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsWebhookGetSingle> localVarReturnType = new GenericType<ServiceDocsWebhookGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
