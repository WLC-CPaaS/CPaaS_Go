/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TemporalRuleSetAPIService TemporalRuleSetAPI service
type TemporalRuleSetAPIService service

type ApiV1AccountAccountIDTemporalrulesetGetRequest struct {
	ctx context.Context
	ApiService *TemporalRuleSetAPIService
	accountID string
	startKey *string
	pageSize *int32
}

// start_key for pagination that was returned as next_start_key from your previous call
func (r ApiV1AccountAccountIDTemporalrulesetGetRequest) StartKey(startKey string) ApiV1AccountAccountIDTemporalrulesetGetRequest {
	r.startKey = &startKey
	return r
}

// number of records to return, range 1 to 50
func (r ApiV1AccountAccountIDTemporalrulesetGetRequest) PageSize(pageSize int32) ApiV1AccountAccountIDTemporalrulesetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1AccountAccountIDTemporalrulesetGetRequest) Execute() (*ServiceDocsTemporalRuleSetGetAll, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulesetGetExecute(r)
}

/*
V1AccountAccountIDTemporalrulesetGet Get Temporal Rule Set List

Access the temporal rule set list in an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalrulesetGetRequest
*/
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetGet(ctx context.Context, accountID string) ApiV1AccountAccountIDTemporalrulesetGetRequest {
	return ApiV1AccountAccountIDTemporalrulesetGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleSetGetAll
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetGetExecute(r ApiV1AccountAccountIDTemporalrulesetGetRequest) (*ServiceDocsTemporalRuleSetGetAll, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleSetGetAll
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleSetAPIService.V1AccountAccountIDTemporalrulesetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalruleset"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalrulesetPostRequest struct {
	ctx context.Context
	ApiService *TemporalRuleSetAPIService
	accountID string
	temporalruleset *ServiceVOIPTemporalRuleSetAddEditData
}

// payload fields
func (r ApiV1AccountAccountIDTemporalrulesetPostRequest) Temporalruleset(temporalruleset ServiceVOIPTemporalRuleSetAddEditData) ApiV1AccountAccountIDTemporalrulesetPostRequest {
	r.temporalruleset = &temporalruleset
	return r
}

func (r ApiV1AccountAccountIDTemporalrulesetPostRequest) Execute() (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulesetPostExecute(r)
}

/*
V1AccountAccountIDTemporalrulesetPost Create Temporal Rule Set

Develop a new temporal rule set for an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alphanumeric
 @return ApiV1AccountAccountIDTemporalrulesetPostRequest
*/
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetPost(ctx context.Context, accountID string) ApiV1AccountAccountIDTemporalrulesetPostRequest {
	return ApiV1AccountAccountIDTemporalrulesetPostRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleSetGetSingle
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetPostExecute(r ApiV1AccountAccountIDTemporalrulesetPostRequest) (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleSetGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleSetAPIService.V1AccountAccountIDTemporalrulesetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalruleset"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.temporalruleset == nil {
		return localVarReturnValue, nil, reportError("temporalruleset is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.temporalruleset
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest struct {
	ctx context.Context
	ApiService *TemporalRuleSetAPIService
	accountID string
	temporalRuleSetID string
}

func (r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest) Execute() (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteExecute(r)
}

/*
V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete Delete Temporal Rule Set

Delete the temporal rule set from an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleSetID temporal rule set ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest
*/
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(ctx context.Context, accountID string, temporalRuleSetID string) ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest {
	return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleSetID: temporalRuleSetID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleSetGetSingle
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteExecute(r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteRequest) (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleSetGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleSetAPIService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleSetID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleSetID, "temporalRuleSetID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest struct {
	ctx context.Context
	ApiService *TemporalRuleSetAPIService
	accountID string
	temporalRuleSetID string
}

func (r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest) Execute() (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetExecute(r)
}

/*
V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet Get Temporal Rule Set Details

Acquire details about a temporal rule set in an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest
*/
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(ctx context.Context, accountID string, temporalRuleSetID string) ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest {
	return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleSetID: temporalRuleSetID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleSetGetSingle
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetExecute(r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetRequest) (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleSetGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleSetAPIService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleSetID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleSetID, "temporalRuleSetID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest struct {
	ctx context.Context
	ApiService *TemporalRuleSetAPIService
	accountID string
	temporalRuleSetID string
	reqBody *ServiceVOIPTemporalRuleSetAddEditData
}

// payload fields
func (r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest) ReqBody(reqBody ServiceVOIPTemporalRuleSetAddEditData) ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest {
	r.reqBody = &reqBody
	return r
}

func (r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest) Execute() (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutExecute(r)
}

/*
V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut Update Temporal Rule Set

Efficiently adjust the temporal rule set in an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest
*/
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(ctx context.Context, accountID string, temporalRuleSetID string) ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest {
	return ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleSetID: temporalRuleSetID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleSetGetSingle
func (a *TemporalRuleSetAPIService) V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutExecute(r ApiV1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutRequest) (*ServiceDocsTemporalRuleSetGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleSetGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleSetAPIService.V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleSetID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleSetID, "temporalRuleSetID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reqBody == nil {
		return localVarReturnValue, nil, reportError("reqBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reqBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
