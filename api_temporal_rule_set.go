/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class TemporalRuleSetAPI {
  private ApiClient apiClient;

  public TemporalRuleSetAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public TemporalRuleSetAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Temporal Rule Set List
   * Access the temporal rule set list in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsTemporalRuleSetGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsTemporalRuleSetGetAll V1AccountAccountIDTemporalrulesetGet(string accountID, string startKey, int32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDTemporalrulesetGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/temporalruleset"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsTemporalRuleSetGetAll> localVarReturnType = new GenericType<ServiceDocsTemporalRuleSetGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Temporal Rule Set
   * Develop a new temporal rule set for an account.
   * @param accountID Account ID, 32 alphanumeric (required)
   * @param temporalruleset payload fields (required)
   * @return ServiceDocsTemporalRuleSetGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsTemporalRuleSetGetSingle V1AccountAccountIDTemporalrulesetPost(string accountID, ServiceVOIPTemporalRuleSetAddEditData temporalruleset) throws ApiException {
    Object localVarPostBody = temporalruleset;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDTemporalrulesetPost");
    }
    
    // verify the required parameter 'temporalruleset' is set
    if (temporalruleset == null) {
      throw new ApiException(400, "Missing the required parameter 'temporalruleset' when calling V1AccountAccountIDTemporalrulesetPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/temporalruleset"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsTemporalRuleSetGetSingle> localVarReturnType = new GenericType<ServiceDocsTemporalRuleSetGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Temporal Rule Set
   * Delete the temporal rule set from an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param temporalRuleSetID temporal rule set ID, 32 alpha numeric (required)
   * @return ServiceDocsTemporalRuleSetGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsTemporalRuleSetGetSingle V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(string accountID, string temporalRuleSetID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete");
    }
    
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      throw new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiClient.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsTemporalRuleSetGetSingle> localVarReturnType = new GenericType<ServiceDocsTemporalRuleSetGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Temporal Rule Set Details
   * Acquire details about a temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
   * @return ServiceDocsTemporalRuleSetGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsTemporalRuleSetGetSingle V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(string accountID, string temporalRuleSetID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet");
    }
    
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      throw new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiClient.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsTemporalRuleSetGetSingle> localVarReturnType = new GenericType<ServiceDocsTemporalRuleSetGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Temporal Rule Set
   * Efficiently adjust the temporal rule set in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param temporalRuleSetID Temporal Ruleset ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsTemporalRuleSetGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsTemporalRuleSetGetSingle V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(string accountID, string temporalRuleSetID, ServiceVOIPTemporalRuleSetAddEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut");
    }
    
    // verify the required parameter 'temporalRuleSetID' is set
    if (temporalRuleSetID == null) {
      throw new ApiException(400, "Missing the required parameter 'temporalRuleSetID' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "temporalRuleSetID" + "\\}", apiClient.escapeString(temporalRuleSetID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsTemporalRuleSetGetSingle> localVarReturnType = new GenericType<ServiceDocsTemporalRuleSetGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
