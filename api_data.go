/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DataAPIService DataAPI service
type DataAPIService service

type ApiV1AccountAccountIDCdrCdrIDGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountID string
	cdrID string
}

func (r ApiV1AccountAccountIDCdrCdrIDGetRequest) Execute() (*ServiceDocsCdrGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDCdrCdrIDGetExecute(r)
}

/*
V1AccountAccountIDCdrCdrIDGet Get CDR Details

Retrieve the details of a single CDR record from an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param cdrID CDR ID, string
 @return ApiV1AccountAccountIDCdrCdrIDGetRequest
*/
func (a *DataAPIService) V1AccountAccountIDCdrCdrIDGet(ctx context.Context, accountID string, cdrID string) ApiV1AccountAccountIDCdrCdrIDGetRequest {
	return ApiV1AccountAccountIDCdrCdrIDGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		cdrID: cdrID,
	}
}

// Execute executes the request
//  @return ServiceDocsCdrGetSingle
func (a *DataAPIService) V1AccountAccountIDCdrCdrIDGetExecute(r ApiV1AccountAccountIDCdrCdrIDGetRequest) (*ServiceDocsCdrGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsCdrGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1AccountAccountIDCdrCdrIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/cdr/{cdrID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cdrID"+"}", url.PathEscape(parameterValueToString(r.cdrID, "cdrID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDCdrGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountID string
	pageSize *string
	startKey *string
	createdFrom *string
	createdTo *string
}

// Page size (Maximum number of results to display per page)
func (r ApiV1AccountAccountIDCdrGetRequest) PageSize(pageSize string) ApiV1AccountAccountIDCdrGetRequest {
	r.pageSize = &pageSize
	return r
}

// Start key (Starting offset for displaying results)
func (r ApiV1AccountAccountIDCdrGetRequest) StartKey(startKey string) ApiV1AccountAccountIDCdrGetRequest {
	r.startKey = &startKey
	return r
}

// For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
func (r ApiV1AccountAccountIDCdrGetRequest) CreatedFrom(createdFrom string) ApiV1AccountAccountIDCdrGetRequest {
	r.createdFrom = &createdFrom
	return r
}

// For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
func (r ApiV1AccountAccountIDCdrGetRequest) CreatedTo(createdTo string) ApiV1AccountAccountIDCdrGetRequest {
	r.createdTo = &createdTo
	return r
}

func (r ApiV1AccountAccountIDCdrGetRequest) Execute() (*ServiceDocsCdrGetAll, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDCdrGetExecute(r)
}

/*
V1AccountAccountIDCdrGet Get CDR List

Retrieve a list of CDRs in a specific account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @return ApiV1AccountAccountIDCdrGetRequest
*/
func (a *DataAPIService) V1AccountAccountIDCdrGet(ctx context.Context, accountID string) ApiV1AccountAccountIDCdrGetRequest {
	return ApiV1AccountAccountIDCdrGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

// Execute executes the request
//  @return ServiceDocsCdrGetAll
func (a *DataAPIService) V1AccountAccountIDCdrGetExecute(r ApiV1AccountAccountIDCdrGetRequest) (*ServiceDocsCdrGetAll, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsCdrGetAll
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1AccountAccountIDCdrGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/cdr"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.createdFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_from", r.createdFrom, "", "")
	}
	if r.createdTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_to", r.createdTo, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataCallDailySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountId *string
	callType *string
	endDate *string
	pageSize *int32
	startDate *string
	startKey *string
}

func (r ApiV1DataCallDailySummaryGetRequest) AccountId(accountId string) ApiV1DataCallDailySummaryGetRequest {
	r.accountId = &accountId
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) CallType(callType string) ApiV1DataCallDailySummaryGetRequest {
	r.callType = &callType
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) EndDate(endDate string) ApiV1DataCallDailySummaryGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) PageSize(pageSize int32) ApiV1DataCallDailySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) StartDate(startDate string) ApiV1DataCallDailySummaryGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) StartKey(startKey string) ApiV1DataCallDailySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataCallDailySummaryGetRequest) Execute() (*ServiceDocsCallDailySummary, *http.Response, error) {
	return r.ApiService.V1DataCallDailySummaryGetExecute(r)
}

/*
V1DataCallDailySummaryGet Get Call Daily Summary List

Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataCallDailySummaryGetRequest
*/
func (a *DataAPIService) V1DataCallDailySummaryGet(ctx context.Context) ApiV1DataCallDailySummaryGetRequest {
	return ApiV1DataCallDailySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsCallDailySummary
func (a *DataAPIService) V1DataCallDailySummaryGetExecute(r ApiV1DataCallDailySummaryGetRequest) (*ServiceDocsCallDailySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsCallDailySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataCallDailySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/call_daily_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "", "")
	}
	if r.callType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_type", r.callType, "", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataCallDetailGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	account *string
	callType *string
	calleeName *string
	calleeNumber *string
	callerName *string
	callerNumber *string
	endDate *string
	pageSize *int32
	startDate *string
	startKey *string
}

func (r ApiV1DataCallDetailGetRequest) Account(account string) ApiV1DataCallDetailGetRequest {
	r.account = &account
	return r
}

func (r ApiV1DataCallDetailGetRequest) CallType(callType string) ApiV1DataCallDetailGetRequest {
	r.callType = &callType
	return r
}

func (r ApiV1DataCallDetailGetRequest) CalleeName(calleeName string) ApiV1DataCallDetailGetRequest {
	r.calleeName = &calleeName
	return r
}

func (r ApiV1DataCallDetailGetRequest) CalleeNumber(calleeNumber string) ApiV1DataCallDetailGetRequest {
	r.calleeNumber = &calleeNumber
	return r
}

func (r ApiV1DataCallDetailGetRequest) CallerName(callerName string) ApiV1DataCallDetailGetRequest {
	r.callerName = &callerName
	return r
}

func (r ApiV1DataCallDetailGetRequest) CallerNumber(callerNumber string) ApiV1DataCallDetailGetRequest {
	r.callerNumber = &callerNumber
	return r
}

func (r ApiV1DataCallDetailGetRequest) EndDate(endDate string) ApiV1DataCallDetailGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiV1DataCallDetailGetRequest) PageSize(pageSize int32) ApiV1DataCallDetailGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataCallDetailGetRequest) StartDate(startDate string) ApiV1DataCallDetailGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiV1DataCallDetailGetRequest) StartKey(startKey string) ApiV1DataCallDetailGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataCallDetailGetRequest) Execute() (*ServiceDocsCallDetail, *http.Response, error) {
	return r.ApiService.V1DataCallDetailGetExecute(r)
}

/*
V1DataCallDetailGet Get Call Detail List

Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataCallDetailGetRequest
*/
func (a *DataAPIService) V1DataCallDetailGet(ctx context.Context) ApiV1DataCallDetailGetRequest {
	return ApiV1DataCallDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsCallDetail
func (a *DataAPIService) V1DataCallDetailGetExecute(r ApiV1DataCallDetailGetRequest) (*ServiceDocsCallDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsCallDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataCallDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/call_detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.account != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account", r.account, "", "")
	}
	if r.callType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_type", r.callType, "", "")
	}
	if r.calleeName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "callee_name", r.calleeName, "", "")
	}
	if r.calleeNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "callee_number", r.calleeNumber, "", "")
	}
	if r.callerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caller_name", r.callerName, "", "")
	}
	if r.callerNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caller_number", r.callerNumber, "", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataCallMonthlySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	account *string
	callType *string
	endMonth *int32
	endYear *int32
	pageSize *int32
	startKey *string
	startMonth *int32
	startYear *int32
}

func (r ApiV1DataCallMonthlySummaryGetRequest) Account(account string) ApiV1DataCallMonthlySummaryGetRequest {
	r.account = &account
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) CallType(callType string) ApiV1DataCallMonthlySummaryGetRequest {
	r.callType = &callType
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) EndMonth(endMonth int32) ApiV1DataCallMonthlySummaryGetRequest {
	r.endMonth = &endMonth
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) EndYear(endYear int32) ApiV1DataCallMonthlySummaryGetRequest {
	r.endYear = &endYear
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) PageSize(pageSize int32) ApiV1DataCallMonthlySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) StartKey(startKey string) ApiV1DataCallMonthlySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) StartMonth(startMonth int32) ApiV1DataCallMonthlySummaryGetRequest {
	r.startMonth = &startMonth
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) StartYear(startYear int32) ApiV1DataCallMonthlySummaryGetRequest {
	r.startYear = &startYear
	return r
}

func (r ApiV1DataCallMonthlySummaryGetRequest) Execute() (*ServiceDocsCallMonthlySummary, *http.Response, error) {
	return r.ApiService.V1DataCallMonthlySummaryGetExecute(r)
}

/*
V1DataCallMonthlySummaryGet Get Call Detail List

Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataCallMonthlySummaryGetRequest
*/
func (a *DataAPIService) V1DataCallMonthlySummaryGet(ctx context.Context) ApiV1DataCallMonthlySummaryGetRequest {
	return ApiV1DataCallMonthlySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsCallMonthlySummary
func (a *DataAPIService) V1DataCallMonthlySummaryGetExecute(r ApiV1DataCallMonthlySummaryGetRequest) (*ServiceDocsCallMonthlySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsCallMonthlySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataCallMonthlySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/call_monthly_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.account != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account", r.account, "", "")
	}
	if r.callType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_type", r.callType, "", "")
	}
	if r.endMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_month", r.endMonth, "", "")
	}
	if r.endYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_year", r.endYear, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.startMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_month", r.startMonth, "", "")
	}
	if r.startYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_year", r.startYear, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataEndpointListGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	endpointName *string
	featureName *string
	pageSize *int32
	startKey *string
	transactionType *string
	version *string
}

func (r ApiV1DataEndpointListGetRequest) EndpointName(endpointName string) ApiV1DataEndpointListGetRequest {
	r.endpointName = &endpointName
	return r
}

func (r ApiV1DataEndpointListGetRequest) FeatureName(featureName string) ApiV1DataEndpointListGetRequest {
	r.featureName = &featureName
	return r
}

func (r ApiV1DataEndpointListGetRequest) PageSize(pageSize int32) ApiV1DataEndpointListGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataEndpointListGetRequest) StartKey(startKey string) ApiV1DataEndpointListGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataEndpointListGetRequest) TransactionType(transactionType string) ApiV1DataEndpointListGetRequest {
	r.transactionType = &transactionType
	return r
}

func (r ApiV1DataEndpointListGetRequest) Version(version string) ApiV1DataEndpointListGetRequest {
	r.version = &version
	return r
}

func (r ApiV1DataEndpointListGetRequest) Execute() (*ServiceDocsEndpointList, *http.Response, error) {
	return r.ApiService.V1DataEndpointListGetExecute(r)
}

/*
V1DataEndpointListGet Get Endpoint List

Access the endpoint list for each CPaaS API.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataEndpointListGetRequest
*/
func (a *DataAPIService) V1DataEndpointListGet(ctx context.Context) ApiV1DataEndpointListGetRequest {
	return ApiV1DataEndpointListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsEndpointList
func (a *DataAPIService) V1DataEndpointListGetExecute(r ApiV1DataEndpointListGetRequest) (*ServiceDocsEndpointList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsEndpointList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataEndpointListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/endpoint_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endpointName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint_name", r.endpointName, "", "")
	}
	if r.featureName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "feature_name", r.featureName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.transactionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transaction_type", r.transactionType, "", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataEventDailySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountId *string
	component *string
	endDate *string
	pageSize *int32
	startDate *string
	startKey *string
}

func (r ApiV1DataEventDailySummaryGetRequest) AccountId(accountId string) ApiV1DataEventDailySummaryGetRequest {
	r.accountId = &accountId
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) Component(component string) ApiV1DataEventDailySummaryGetRequest {
	r.component = &component
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) EndDate(endDate string) ApiV1DataEventDailySummaryGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) PageSize(pageSize int32) ApiV1DataEventDailySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) StartDate(startDate string) ApiV1DataEventDailySummaryGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) StartKey(startKey string) ApiV1DataEventDailySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataEventDailySummaryGetRequest) Execute() (*ServiceDocsEventDailySummary, *http.Response, error) {
	return r.ApiService.V1DataEventDailySummaryGetExecute(r)
}

/*
V1DataEventDailySummaryGet Get Event Daily Summary List

Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataEventDailySummaryGetRequest
*/
func (a *DataAPIService) V1DataEventDailySummaryGet(ctx context.Context) ApiV1DataEventDailySummaryGetRequest {
	return ApiV1DataEventDailySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsEventDailySummary
func (a *DataAPIService) V1DataEventDailySummaryGetExecute(r ApiV1DataEventDailySummaryGetRequest) (*ServiceDocsEventDailySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsEventDailySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataEventDailySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/event_daily_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "", "")
	}
	if r.component != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataEventDetailGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountId *string
	component *string
	endDateTime *string
	eventName *string
	execStatus *string
	pageSize *int32
	startDateTime *string
	startKey *string
	username *string
}

func (r ApiV1DataEventDetailGetRequest) AccountId(accountId string) ApiV1DataEventDetailGetRequest {
	r.accountId = &accountId
	return r
}

func (r ApiV1DataEventDetailGetRequest) Component(component string) ApiV1DataEventDetailGetRequest {
	r.component = &component
	return r
}

func (r ApiV1DataEventDetailGetRequest) EndDateTime(endDateTime string) ApiV1DataEventDetailGetRequest {
	r.endDateTime = &endDateTime
	return r
}

func (r ApiV1DataEventDetailGetRequest) EventName(eventName string) ApiV1DataEventDetailGetRequest {
	r.eventName = &eventName
	return r
}

func (r ApiV1DataEventDetailGetRequest) ExecStatus(execStatus string) ApiV1DataEventDetailGetRequest {
	r.execStatus = &execStatus
	return r
}

func (r ApiV1DataEventDetailGetRequest) PageSize(pageSize int32) ApiV1DataEventDetailGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataEventDetailGetRequest) StartDateTime(startDateTime string) ApiV1DataEventDetailGetRequest {
	r.startDateTime = &startDateTime
	return r
}

func (r ApiV1DataEventDetailGetRequest) StartKey(startKey string) ApiV1DataEventDetailGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataEventDetailGetRequest) Username(username string) ApiV1DataEventDetailGetRequest {
	r.username = &username
	return r
}

func (r ApiV1DataEventDetailGetRequest) Execute() (*ServiceDocsEventDetail, *http.Response, error) {
	return r.ApiService.V1DataEventDetailGetExecute(r)
}

/*
V1DataEventDetailGet Get Event Details

Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataEventDetailGetRequest
*/
func (a *DataAPIService) V1DataEventDetailGet(ctx context.Context) ApiV1DataEventDetailGetRequest {
	return ApiV1DataEventDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsEventDetail
func (a *DataAPIService) V1DataEventDetailGetExecute(r ApiV1DataEventDetailGetRequest) (*ServiceDocsEventDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsEventDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataEventDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/event_detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "", "")
	}
	if r.component != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "", "")
	}
	if r.endDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_time", r.endDateTime, "", "")
	}
	if r.eventName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_name", r.eventName, "", "")
	}
	if r.execStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exec_status", r.execStatus, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_time", r.startDateTime, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username", r.username, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataEventMonthlySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	accountId *string
	component *string
	endMonth *int32
	endYear *int32
	pageSize *int32
	startKey *string
	startMonth *int32
	startYear *int32
}

func (r ApiV1DataEventMonthlySummaryGetRequest) AccountId(accountId string) ApiV1DataEventMonthlySummaryGetRequest {
	r.accountId = &accountId
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) Component(component string) ApiV1DataEventMonthlySummaryGetRequest {
	r.component = &component
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) EndMonth(endMonth int32) ApiV1DataEventMonthlySummaryGetRequest {
	r.endMonth = &endMonth
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) EndYear(endYear int32) ApiV1DataEventMonthlySummaryGetRequest {
	r.endYear = &endYear
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) PageSize(pageSize int32) ApiV1DataEventMonthlySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) StartKey(startKey string) ApiV1DataEventMonthlySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) StartMonth(startMonth int32) ApiV1DataEventMonthlySummaryGetRequest {
	r.startMonth = &startMonth
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) StartYear(startYear int32) ApiV1DataEventMonthlySummaryGetRequest {
	r.startYear = &startYear
	return r
}

func (r ApiV1DataEventMonthlySummaryGetRequest) Execute() (*ServiceDocsEventMonthlySummary, *http.Response, error) {
	return r.ApiService.V1DataEventMonthlySummaryGetExecute(r)
}

/*
V1DataEventMonthlySummaryGet Get Event Monthly Summary List

Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataEventMonthlySummaryGetRequest
*/
func (a *DataAPIService) V1DataEventMonthlySummaryGet(ctx context.Context) ApiV1DataEventMonthlySummaryGetRequest {
	return ApiV1DataEventMonthlySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsEventMonthlySummary
func (a *DataAPIService) V1DataEventMonthlySummaryGetExecute(r ApiV1DataEventMonthlySummaryGetRequest) (*ServiceDocsEventMonthlySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsEventMonthlySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataEventMonthlySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/event_monthly_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "", "")
	}
	if r.component != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "", "")
	}
	if r.endMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_month", r.endMonth, "", "")
	}
	if r.endYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_year", r.endYear, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.startMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_month", r.startMonth, "", "")
	}
	if r.startYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_year", r.startYear, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataFeatureDailySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	endDate *string
	featureName *string
	pageSize *int32
	startDate *string
	startKey *string
}

func (r ApiV1DataFeatureDailySummaryGetRequest) EndDate(endDate string) ApiV1DataFeatureDailySummaryGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiV1DataFeatureDailySummaryGetRequest) FeatureName(featureName string) ApiV1DataFeatureDailySummaryGetRequest {
	r.featureName = &featureName
	return r
}

func (r ApiV1DataFeatureDailySummaryGetRequest) PageSize(pageSize int32) ApiV1DataFeatureDailySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataFeatureDailySummaryGetRequest) StartDate(startDate string) ApiV1DataFeatureDailySummaryGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiV1DataFeatureDailySummaryGetRequest) StartKey(startKey string) ApiV1DataFeatureDailySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataFeatureDailySummaryGetRequest) Execute() (*ServiceDocsFeatureDailySummary, *http.Response, error) {
	return r.ApiService.V1DataFeatureDailySummaryGetExecute(r)
}

/*
V1DataFeatureDailySummaryGet Get Feature Daily Summary List

Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataFeatureDailySummaryGetRequest
*/
func (a *DataAPIService) V1DataFeatureDailySummaryGet(ctx context.Context) ApiV1DataFeatureDailySummaryGetRequest {
	return ApiV1DataFeatureDailySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsFeatureDailySummary
func (a *DataAPIService) V1DataFeatureDailySummaryGetExecute(r ApiV1DataFeatureDailySummaryGetRequest) (*ServiceDocsFeatureDailySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsFeatureDailySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataFeatureDailySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/feature_daily_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "", "")
	}
	if r.featureName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "feature_name", r.featureName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataFeatureMonthlySummaryGetRequest struct {
	ctx context.Context
	ApiService *DataAPIService
	endMonth *int32
	endYear *int32
	featureName *string
	pageSize *int32
	startKey *string
	startMonth *int32
	startYear *int32
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) EndMonth(endMonth int32) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.endMonth = &endMonth
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) EndYear(endYear int32) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.endYear = &endYear
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) FeatureName(featureName string) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.featureName = &featureName
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) PageSize(pageSize int32) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) StartKey(startKey string) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.startKey = &startKey
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) StartMonth(startMonth int32) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.startMonth = &startMonth
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) StartYear(startYear int32) ApiV1DataFeatureMonthlySummaryGetRequest {
	r.startYear = &startYear
	return r
}

func (r ApiV1DataFeatureMonthlySummaryGetRequest) Execute() (*ServiceDocsFeatureMonthlySummary, *http.Response, error) {
	return r.ApiService.V1DataFeatureMonthlySummaryGetExecute(r)
}

/*
V1DataFeatureMonthlySummaryGet Get Feature Monthly Summary List

Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DataFeatureMonthlySummaryGetRequest
*/
func (a *DataAPIService) V1DataFeatureMonthlySummaryGet(ctx context.Context) ApiV1DataFeatureMonthlySummaryGetRequest {
	return ApiV1DataFeatureMonthlySummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceDocsFeatureMonthlySummary
func (a *DataAPIService) V1DataFeatureMonthlySummaryGetExecute(r ApiV1DataFeatureMonthlySummaryGetRequest) (*ServiceDocsFeatureMonthlySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsFeatureMonthlySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataAPIService.V1DataFeatureMonthlySummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/feature_monthly_summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_month", r.endMonth, "", "")
	}
	if r.endYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_year", r.endYear, "", "")
	}
	if r.featureName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "feature_name", r.featureName, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.startMonth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_month", r.startMonth, "", "")
	}
	if r.startYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_year", r.startYear, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
