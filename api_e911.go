/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class E911API {
  private ApiClient apiClient;

  public E911API() {
    this(Configuration.getDefaultApiClient());
  }

  public E911API(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get E911 List
   * Obtain e911 URIs associated with the provided account ID.
   * @return ServiceDocE911URIsApiOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911URIsApiOutput V1E911Get() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/e911";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911URIsApiOutput> localVarReturnType = new GenericType<ServiceDocE911URIsApiOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Activate E911 Location
   * Edit the provision location.
   * @param locationID Location ID (required)
   * @return ServiceDocE911ActiveLocationOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911ActiveLocationOutput V1E911LocationLocationIDActivatePut(string locationID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      throw new ApiException(400, "Missing the required parameter 'locationID' when calling V1E911LocationLocationIDActivatePut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/location/{locationID}/activate"
      .replaceAll("\\{" + "locationID" + "\\}", apiClient.escapeString(locationID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911ActiveLocationOutput> localVarReturnType = new GenericType<ServiceDocE911ActiveLocationOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete E911 Location
   * Remove the location.
   * @param locationID Location ID (required)
   * @return ServiceDocE911RemoveLocationOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911RemoveLocationOutput V1E911LocationLocationIDDelete(string locationID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'locationID' is set
    if (locationID == null) {
      throw new ApiException(400, "Missing the required parameter 'locationID' when calling V1E911LocationLocationIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/location/{locationID}"
      .replaceAll("\\{" + "locationID" + "\\}", apiClient.escapeString(locationID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911RemoveLocationOutput> localVarReturnType = new GenericType<ServiceDocE911RemoveLocationOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Validate a Location
   * Validate the location details.
   * @param reqBody location details (required)
   * @return ServiceDocE911ValidateLocationOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911ValidateLocationOutput V1E911LocationValidatePut(ServiceE911ValidateLocationInput reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1E911LocationValidatePut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/location/validate";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911ValidateLocationOutput> localVarReturnType = new GenericType<ServiceDocE911ValidateLocationOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete E911 Phone Number
   * Delete the e911 URI connected with the account URI.
   * @param phoneNumber Phone Number (required)
   * @return ServiceDocE911RemoveURIApiOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911RemoveURIApiOutput V1E911PhoneNumberDelete(string phoneNumber) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'phoneNumber' when calling V1E911PhoneNumberDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/{phoneNumber}"
      .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911RemoveURIApiOutput> localVarReturnType = new GenericType<ServiceDocE911RemoveURIApiOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Actvie Location for a Phone Number
   * Get the e911 location connected with the URI.
   * @param phoneNumber Phone Number (required)
   * @return ServiceDocE911ActiveLocationURIApiOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911ActiveLocationURIApiOutput V1E911PhoneNumberLocationActiveGet(string phoneNumber) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'phoneNumber' when calling V1E911PhoneNumberLocationActiveGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/{phoneNumber}/location/active"
      .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911ActiveLocationURIApiOutput> localVarReturnType = new GenericType<ServiceDocE911ActiveLocationURIApiOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Location List for Phone Number
   * Access a list of the e911 locations associated with the provided URI.
   * @param phoneNumber Phone Number (required)
   * @return ServiceDocE911LocationsURIApiOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911LocationsURIApiOutput V1E911PhoneNumberLocationGet(string phoneNumber) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'phoneNumber' when calling V1E911PhoneNumberLocationGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911/{phoneNumber}/location"
      .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911LocationsURIApiOutput> localVarReturnType = new GenericType<ServiceDocE911LocationsURIApiOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create an E911 Location
   * Enter new location details.
   * @param reqBody location details (required)
   * @return ServiceDocE911AddLocationOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocE911AddLocationOutput V1E911Post(ServiceE911AddLocationInput reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1E911Post");
    }
    
    // create path and map variables
    String localVarPath = "/v1/e911";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<ServiceDocE911AddLocationOutput> localVarReturnType = new GenericType<ServiceDocE911AddLocationOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
