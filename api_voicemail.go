/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;
import os;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class VoicemailAPI {
  private ApiClient apiClient;

  public VoicemailAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public VoicemailAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Voicemail Box List
   * List all voicemail boxes in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsVoicemailGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailGetAll V1AccountAccountIDVoicemailGet(string accountID, string startKey, int32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailGetAll> localVarReturnType = new GenericType<ServiceDocsVoicemailGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Voicemail Box
   * Create a voicemail box for receiving and storing voicemail messages.
   * @param accountID account ID, 32 alphanumeric (required)
   * @param voicemail voicemail payload fields (required)
   * @return ServiceDocsVoicemailGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailGetSingle V1AccountAccountIDVoicemailPost(string accountID, ServiceVOIPVoicemailAddEditData voicemail) throws ApiException {
    Object localVarPostBody = voicemail;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailPost");
    }
    
    // verify the required parameter 'voicemail' is set
    if (voicemail == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemail' when calling V1AccountAccountIDVoicemailPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Voicemail Box
   * Delete a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @return ServiceDocsVoicemailGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailGetSingle V1AccountAccountIDVoicemailVoicemailIDDelete(string accountID, string voicemailID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDDelete");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Voicemail Box Details
   * Get information about a single voicemail box.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @return ServiceDocsVoicemailGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailGetSingle V1AccountAccountIDVoicemailVoicemailIDGet(string accountID, string voicemailID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDGet");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Voicemail Message List
   * Get a list of voicemail messages from an account&#39;s voicemail box.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID voicemail ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsVoicemailMessageGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailMessageGetAll V1AccountAccountIDVoicemailVoicemailIDMessageGet(string accountID, string voicemailID, string startKey, int32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageGet");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailMessageGetAll> localVarReturnType = new GenericType<ServiceDocsVoicemailMessageGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Voicemail Message
   * Delete a voicemail message from a voicemail box in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @param messageID message ID, 32 alpha numeric (required)
   * @return ServiceDocsVoicemailMessageGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailMessageGetSingle V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete(string accountID, string voicemailID, string messageID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete");
    }
    
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      throw new ApiException(400, "Missing the required parameter 'messageID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()))
      .replaceAll("\\{" + "messageID" + "\\}", apiClient.escapeString(messageID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailMessageGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailMessageGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Voicemail Message Details
   * Retrieve the container details of an individual voicemail message. This includes a reference to the audio file, but not the message itself.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
   * @return ServiceDocsVoicemailMessageGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailMessageGetSingle V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet(string accountID, string voicemailID, string messageID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet");
    }
    
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      throw new ApiException(400, "Missing the required parameter 'messageID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()))
      .replaceAll("\\{" + "messageID" + "\\}", apiClient.escapeString(messageID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailMessageGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailMessageGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Voicemail Message
   * Copy or move a voicemail message to a different folder in the same voicemail box or move the message to a separate voicemail box.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @param messageID Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsVoicemailMessageGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailMessageGetSingle V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut(string accountID, string voicemailID, string messageID, ServiceVOIPVoicemailMessageChange reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut");
    }
    
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      throw new ApiException(400, "Missing the required parameter 'messageID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()))
      .replaceAll("\\{" + "messageID" + "\\}", apiClient.escapeString(messageID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailMessageGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailMessageGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Voicemail Message File
   * Get the original audio content of a specific voicemail message identified by its unique ID within an account&#39;s voicemail box. URL Param \&quot;voicemailID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific voicemail box. URL Param \&quot;messageID\&quot; is a unique 32-character alphanumeric identifier assigned by the system, which refers to a specific message within a voicemail box.
   * @param accountID Account ID, unique 32-character alphanumeric identifier (required)
   * @param voicemailID Voicemail Box ID, unique 32-character alphanumeric identifier (required)
   * @param messageID Message ID, unique 32-character alphanumeric identifier (required)
   * @return *os.File
   * @throws ApiException if fails to make API call
   */
  public *os.File V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet(string accountID, string voicemailID, string messageID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet");
    }
    
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      throw new ApiException(400, "Missing the required parameter 'messageID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()))
      .replaceAll("\\{" + "messageID" + "\\}", apiClient.escapeString(messageID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<*os.File> localVarReturnType = new GenericType<*os.File>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Add Voicemail Message File
   * Associate an audio recording file with the voicemail to fully complete the message.
   * @param accountID Account ID, 32 alphanumeric characters (required)
   * @param voicemailID Voicemail ID, 32 alphanumeric characters (required)
   * @param messageID Message ID, 32 alphanumeric characters (required)
   * @param file Audio file to upload (required)
   * @return map[string]interface{}
   * @throws ApiException if fails to make API call
   */
  public map[string]interface{} V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost(string accountID, string voicemailID, string messageID, *os.File file) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost");
    }
    
    // verify the required parameter 'messageID' is set
    if (messageID == null) {
      throw new ApiException(400, "Missing the required parameter 'messageID' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost");
    }
    
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling V1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()))
      .replaceAll("\\{" + "messageID" + "\\}", apiClient.escapeString(messageID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    if (file != null)
      localVarFormParams.put("file", file);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<map[string]interface{}> localVarReturnType = new GenericType<map[string]interface{}>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Voicemail Message
   * Create the container information for a recorded voicemail message in a voicemail box.
   * @param accountID account ID, 32 alphanumeric (required)
   * @param voicemailID voicemail ID, 32 alphanumeric (required)
   * @param message voicemail message payload fields (required)
   * @return ServiceDocsVoicemailMessageGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailMessageGetSingle V1AccountAccountIDVoicemailVoicemailIDMessagePost(string accountID, string voicemailID, ServiceVOIPVoicemailMessageAddData message) throws ApiException {
    Object localVarPostBody = message;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDMessagePost");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDMessagePost");
    }
    
    // verify the required parameter 'message' is set
    if (message == null) {
      throw new ApiException(400, "Missing the required parameter 'message' when calling V1AccountAccountIDVoicemailVoicemailIDMessagePost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}/message"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailMessageGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailMessageGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Voicemail Box
   * Update the settings in an individual voicemail box, such as the owner, PIN, etc.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param voicemailID Voicemail ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsVoicemailGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsVoicemailGetSingle V1AccountAccountIDVoicemailVoicemailIDPut(string accountID, string voicemailID, ServiceVOIPVoicemailAddEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1AccountAccountIDVoicemailVoicemailIDPut");
    }
    
    // verify the required parameter 'voicemailID' is set
    if (voicemailID == null) {
      throw new ApiException(400, "Missing the required parameter 'voicemailID' when calling V1AccountAccountIDVoicemailVoicemailIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1AccountAccountIDVoicemailVoicemailIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/voicemail/{voicemailID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "voicemailID" + "\\}", apiClient.escapeString(voicemailID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsVoicemailGetSingle> localVarReturnType = new GenericType<ServiceDocsVoicemailGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
