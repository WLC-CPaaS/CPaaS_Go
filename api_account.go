/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class AccountAPI {
  private ApiClient apiClient;

  public AccountAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public AccountAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Sub Account List
   * Conveniently access the list of children accounts.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsAccountGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetAll V1AccountAccountidChildrenGet(string accountid, string startKey, int32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidChildrenGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/children"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetAll> localVarReturnType = new GenericType<ServiceDocsAccountGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Account
   * Delete an account within your organization.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidDelete(string accountid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Get the DNS record of an account from the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordGet(string accountid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidDnsrecordGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/dnsrecord"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Create the DNS record of an account with the help realm in the Route 53 entry.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPost(string accountid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidDnsrecordPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/dnsrecord"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Toggle the realm DNS record between srv and cname.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param dnsrecord record type fields with value SRV, CNAME (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidDnsrecordPut(string accountid, ServiceUpdateRecordTypeForAccount dnsrecord) throws ApiException {
    Object localVarPostBody = dnsrecord;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidDnsrecordPut");
    }
    
    // verify the required parameter 'dnsrecord' is set
    if (dnsrecord == null) {
      throw new ApiException(400, "Missing the required parameter 'dnsrecord' when calling V1AccountAccountidDnsrecordPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/dnsrecord"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Account Details
   * This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidGet(string accountid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Account Limits
   * Check the maximum number of inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @return ServiceDocsAccountLimit
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountLimit V1AccountAccountidLimitGet(string accountid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidLimitGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/limit"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountLimit> localVarReturnType = new GenericType<ServiceDocsAccountLimit>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Set Account Limits
   * Apply parameters to restrict access to inbound, outbound, and two-way trunks.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param limit account fields (required)
   * @return ServiceDocsAccountLimit
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountLimit V1AccountAccountidLimitPut(string accountid, ServiceVOIPAccountLimit2 limit) throws ApiException {
    Object localVarPostBody = limit;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidLimitPut");
    }
    
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling V1AccountAccountidLimitPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/limit"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountLimit> localVarReturnType = new GenericType<ServiceDocsAccountLimit>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Sub Account
   * Establish a sub account to enable an administrator within your organization to create accounts.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param account account fields (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidPost(string accountid, ServiceVOIPAccountAddData account) throws ApiException {
    Object localVarPostBody = account;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidPost");
    }
    
    // verify the required parameter 'account' is set
    if (account == null) {
      throw new ApiException(400, "Missing the required parameter 'account' when calling V1AccountAccountidPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Account
   * Modify pertinent account data.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param account account fields (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountAccountidPut(string accountid, ServiceVOIPAccountEditData account) throws ApiException {
    Object localVarPostBody = account;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling V1AccountAccountidPut");
    }
    
    // verify the required parameter 'account' is set
    if (account == null) {
      throw new ApiException(400, "Missing the required parameter 'account' when calling V1AccountAccountidPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
   * @return ServiceDocsAccountAPIKey
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountAPIKey V1AccountApikeyGet() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/account/apikey";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountAPIKey> localVarReturnType = new GenericType<ServiceDocsAccountAPIKey>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Account List
   * Retrieve a list of all CPaaS accounts that exist within your organization.
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsAccountGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetAll V1AccountGet(string startKey, int32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/account";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetAll> localVarReturnType = new GenericType<ServiceDocsAccountGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Account
   * Create an account.
   * @param account account fields (required)
   * @return ServiceDocsAccountGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAccountGetSingle V1AccountPost(ServiceVOIPAccountAddData account) throws ApiException {
    Object localVarPostBody = account;
    
    // verify the required parameter 'account' is set
    if (account == null) {
      throw new ApiException(400, "Missing the required parameter 'account' when calling V1AccountPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAccountGetSingle> localVarReturnType = new GenericType<ServiceDocsAccountGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
