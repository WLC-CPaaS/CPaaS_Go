/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TemporalRuleAPIService TemporalRuleAPI service
type TemporalRuleAPIService service

type ApiV1AccountAccountIDTemporalruleGetRequest struct {
	ctx context.Context
	ApiService *TemporalRuleAPIService
	accountID string
	startKey *string
	pageSize *int32
}

// start_key for pagination that was returned as next_start_key from your previous call
func (r ApiV1AccountAccountIDTemporalruleGetRequest) StartKey(startKey string) ApiV1AccountAccountIDTemporalruleGetRequest {
	r.startKey = &startKey
	return r
}

// number of records to return, range 1 to 50
func (r ApiV1AccountAccountIDTemporalruleGetRequest) PageSize(pageSize int32) ApiV1AccountAccountIDTemporalruleGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiV1AccountAccountIDTemporalruleGetRequest) Execute() (*ServiceDocsTemporalRuleGetAll, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalruleGetExecute(r)
}

/*
V1AccountAccountIDTemporalruleGet Get Temporal Rule List

Access all temporal rules for an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalruleGetRequest
*/
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleGet(ctx context.Context, accountID string) ApiV1AccountAccountIDTemporalruleGetRequest {
	return ApiV1AccountAccountIDTemporalruleGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleGetAll
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleGetExecute(r ApiV1AccountAccountIDTemporalruleGetRequest) (*ServiceDocsTemporalRuleGetAll, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleGetAll
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleAPIService.V1AccountAccountIDTemporalruleGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalrule"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_key", r.startKey, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UtilCPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalrulePostRequest struct {
	ctx context.Context
	ApiService *TemporalRuleAPIService
	accountID string
	temporalrule *ServiceVOIPTemporalRuleAddEdit2
}

// payload fields
func (r ApiV1AccountAccountIDTemporalrulePostRequest) Temporalrule(temporalrule ServiceVOIPTemporalRuleAddEdit2) ApiV1AccountAccountIDTemporalrulePostRequest {
	r.temporalrule = &temporalrule
	return r
}

func (r ApiV1AccountAccountIDTemporalrulePostRequest) Execute() (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalrulePostExecute(r)
}

/*
V1AccountAccountIDTemporalrulePost Create Temporal Rule

Create temporal rules for an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alphanumeric
 @return ApiV1AccountAccountIDTemporalrulePostRequest
*/
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalrulePost(ctx context.Context, accountID string) ApiV1AccountAccountIDTemporalrulePostRequest {
	return ApiV1AccountAccountIDTemporalrulePostRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleGetSingle
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalrulePostExecute(r ApiV1AccountAccountIDTemporalrulePostRequest) (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleAPIService.V1AccountAccountIDTemporalrulePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalrule"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.temporalrule == nil {
		return localVarReturnValue, nil, reportError("temporalrule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.temporalrule
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UtilCPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest struct {
	ctx context.Context
	ApiService *TemporalRuleAPIService
	accountID string
	temporalRuleID string
}

func (r ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest) Execute() (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalruleTemporalRuleIDDeleteExecute(r)
}

/*
V1AccountAccountIDTemporalruleTemporalRuleIDDelete Delete Temporal Rule

Remove a temporal rule from an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleID temporal rule ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest
*/
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDDelete(ctx context.Context, accountID string, temporalRuleID string) ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest {
	return ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleID: temporalRuleID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleGetSingle
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDDeleteExecute(r ApiV1AccountAccountIDTemporalruleTemporalRuleIDDeleteRequest) (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleAPIService.V1AccountAccountIDTemporalruleTemporalRuleIDDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleID, "temporalRuleID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UtilCPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest struct {
	ctx context.Context
	ApiService *TemporalRuleAPIService
	accountID string
	temporalRuleID string
}

func (r ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest) Execute() (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalruleTemporalRuleIDGetExecute(r)
}

/*
V1AccountAccountIDTemporalruleTemporalRuleIDGet Get Temporal Rule Details

View details about individual time rules.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleID Temporal Rule ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest
*/
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDGet(ctx context.Context, accountID string, temporalRuleID string) ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest {
	return ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleID: temporalRuleID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleGetSingle
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDGetExecute(r ApiV1AccountAccountIDTemporalruleTemporalRuleIDGetRequest) (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleAPIService.V1AccountAccountIDTemporalruleTemporalRuleIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleID, "temporalRuleID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UtilCPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest struct {
	ctx context.Context
	ApiService *TemporalRuleAPIService
	accountID string
	temporalRuleID string
	reqBody *ServiceVOIPTemporalRuleAddEdit2
}

// payload fields
func (r ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest) ReqBody(reqBody ServiceVOIPTemporalRuleAddEdit2) ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest {
	r.reqBody = &reqBody
	return r
}

func (r ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest) Execute() (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	return r.ApiService.V1AccountAccountIDTemporalruleTemporalRuleIDPutExecute(r)
}

/*
V1AccountAccountIDTemporalruleTemporalRuleIDPut Update Temporal Rule

Edit the existing temporal rules in an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountID Account ID, 32 alpha numeric
 @param temporalRuleID Temporal Rule ID, 32 alpha numeric
 @return ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest
*/
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDPut(ctx context.Context, accountID string, temporalRuleID string) ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest {
	return ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
		temporalRuleID: temporalRuleID,
	}
}

// Execute executes the request
//  @return ServiceDocsTemporalRuleGetSingle
func (a *TemporalRuleAPIService) V1AccountAccountIDTemporalruleTemporalRuleIDPutExecute(r ApiV1AccountAccountIDTemporalruleTemporalRuleIDPutRequest) (*ServiceDocsTemporalRuleGetSingle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceDocsTemporalRuleGetSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalRuleAPIService.V1AccountAccountIDTemporalruleTemporalRuleIDPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", url.PathEscape(parameterValueToString(r.accountID, "accountID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"temporalRuleID"+"}", url.PathEscape(parameterValueToString(r.temporalRuleID, "temporalRuleID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reqBody == nil {
		return localVarReturnValue, nil, reportError("reqBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reqBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UtilCPAASError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
