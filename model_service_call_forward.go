/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceCallForward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceCallForward{}

// ServiceCallForward struct for ServiceCallForward
type ServiceCallForward struct {
	Enabled *bool `json:"enabled,omitempty"`
	Number *string `json:"number,omitempty"`
}

// NewServiceCallForward instantiates a new ServiceCallForward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceCallForward() *ServiceCallForward {
	this := ServiceCallForward{}
	return &this
}

// NewServiceCallForwardWithDefaults instantiates a new ServiceCallForward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceCallForwardWithDefaults() *ServiceCallForward {
	this := ServiceCallForward{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ServiceCallForward) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCallForward) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ServiceCallForward) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ServiceCallForward) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ServiceCallForward) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCallForward) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ServiceCallForward) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *ServiceCallForward) SetNumber(v string) {
	o.Number = &v
}

func (o ServiceCallForward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceCallForward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	return toSerialize, nil
}

type NullableServiceCallForward struct {
	value *ServiceCallForward
	isSet bool
}

func (v NullableServiceCallForward) Get() *ServiceCallForward {
	return v.value
}

func (v *NullableServiceCallForward) Set(val *ServiceCallForward) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCallForward) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCallForward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCallForward(val *ServiceCallForward) *NullableServiceCallForward {
	return &NullableServiceCallForward{value: val, isSet: true}
}

func (v NullableServiceCallForward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCallForward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


