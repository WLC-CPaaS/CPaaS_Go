/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class SMSAPI {
  private ApiClient apiClient;

  public SMSAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public SMSAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Get details about a single imported campaign in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param campaignID Campaign ID (required)
   * @return ServiceDocsCampaignImportOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportGet(string accountID, string campaignID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1SmsAccountAccountIDCampaignCampaignIDImportGet");
    }
    
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      throw new ApiException(400, "Missing the required parameter 'campaignID' when calling V1SmsAccountAccountIDCampaignCampaignIDImportGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "campaignID" + "\\}", apiClient.escapeString(campaignID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCampaignImportOutput> localVarReturnType = new GenericType<ServiceDocsCampaignImportOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Import campaign
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param campaignID Campaign ID (required)
   * @return ServiceDocsCampaignImportOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCampaignImportOutput V1SmsAccountAccountIDCampaignCampaignIDImportPost(string accountID, string campaignID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1SmsAccountAccountIDCampaignCampaignIDImportPost");
    }
    
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      throw new ApiException(400, "Missing the required parameter 'campaignID' when calling V1SmsAccountAccountIDCampaignCampaignIDImportPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "campaignID" + "\\}", apiClient.escapeString(campaignID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCampaignImportOutput> localVarReturnType = new GenericType<ServiceDocsCampaignImportOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Get telephone numbers associated with a campaign.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param campaignID Campaign ID (required)
   * @param pageNum Page number (optional)
   * @param pageSize Page size (optional)
   * @return ServiceDocsCampaignPhoneNumberOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCampaignPhoneNumberOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(string accountID, string campaignID, float32 pageNum, float32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
    }
    
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      throw new ApiException(400, "Missing the required parameter 'campaignID' when calling V1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "campaignID" + "\\}", apiClient.escapeString(campaignID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page_num", pageNum));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCampaignPhoneNumberOutput> localVarReturnType = new GenericType<ServiceDocsCampaignPhoneNumberOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Associate or dissociate telephone numbers with a campaign.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param campaignID Campaign ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsCampaignTagDetagPhonenumbersOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCampaignTagDetagPhonenumbersOutput V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(string accountID, string campaignID, ServiceCampaignTagDetagPhonenumbers reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
    }
    
    // verify the required parameter 'campaignID' is set
    if (campaignID == null) {
      throw new ApiException(400, "Missing the required parameter 'campaignID' when calling V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "campaignID" + "\\}", apiClient.escapeString(campaignID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCampaignTagDetagPhonenumbersOutput> localVarReturnType = new GenericType<ServiceDocsCampaignTagDetagPhonenumbersOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Get a list of all imported campaigns in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param pageNum Page number (optional)
   * @param pageSize Page size (optional)
   * @return ServiceDocsCampaignImportedGetAllOutput
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCampaignImportedGetAllOutput V1SmsAccountAccountIDCampaignImportGet(string accountID, float32 pageNum, float32 pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling V1SmsAccountAccountIDCampaignImportGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/sms/account/{accountID}/campaign/import"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page_num", pageNum));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCampaignImportedGetAllOutput> localVarReturnType = new GenericType<ServiceDocsCampaignImportedGetAllOutput>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
