/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import openapi.*;
import .Pair;

import strings;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.GoClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class CPaaSManagementAPI {
  private ApiClient apiClient;

  public CPaaSManagementAPI() {
    this(Configuration.getDefaultApiClient());
  }

  public CPaaSManagementAPI(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get All CPaaS Users
   * Retrieve a list of all CPaaS users in an account.
   * @param pageSize number of records to return, range 1 to 100 (optional)
   * @param startKey unique to fetch next records (optional)
   * @param sort sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)
   * @param email Email (optional)
   * @param role User Role (optional)
   * @param firstName First Name (optional)
   * @param lastName Last Name (optional)
   * @return ServiceDocsAdminUserGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAdminUserGetAll V1MgmtUserGet(int32 pageSize, string startKey, string sort, string email, string role, string firstName, string lastName) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/mgmt/user";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
    localVarQueryParams.addAll(apiClient.parameterToPair("first_name", firstName));
    localVarQueryParams.addAll(apiClient.parameterToPair("last_name", lastName));

    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAdminUserGetAll> localVarReturnType = new GenericType<ServiceDocsAdminUserGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Invite CPaaS User
   * Link a new CPaaS user to an existing client account.
   * @param reqBody payload fields (required)
   * @return ServiceDocsAdminUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAdminUserGetSingle V1MgmtUserPost(ServiceAdminUserAddData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1MgmtUserPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/mgmt/user";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAdminUserGetSingle> localVarReturnType = new GenericType<ServiceDocsAdminUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Post", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete CPaaS User
   * Delete a CPaaS user from the associated account.
   * @param userID User ID, numeric (required)
   * @return ServiceDocsAdminUserDelete
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAdminUserDelete V1MgmtUserUserIDDelete(string userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling V1MgmtUserUserIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/mgmt/user/{userID}"
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAdminUserDelete> localVarReturnType = new GenericType<ServiceDocsAdminUserDelete>() {};
    return apiClient.invokeAPI(localVarPath, "Delete", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get CPaaS User Details
   * View details about each CPaaS user in an account.
   * @param userID User ID, numeric (required)
   * @return ServiceDocsAdminUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAdminUserGetSingle V1MgmtUserUserIDGet(string userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling V1MgmtUserUserIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/mgmt/user/{userID}"
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAdminUserGetSingle> localVarReturnType = new GenericType<ServiceDocsAdminUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Get", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update CPaaS User Role
   * Update a CPaaS user&#39;s role within a client&#39;s account.
   * @param userID User ID, numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsAdminUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsAdminUserGetSingle V1MgmtUserUserIDPut(string userID, ServiceAdminUserEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling V1MgmtUserUserIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling V1MgmtUserUserIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/mgmt/user/{userID}"
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsAdminUserGetSingle> localVarReturnType = new GenericType<ServiceDocsAdminUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "Put", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
