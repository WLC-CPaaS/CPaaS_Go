/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MenuInputData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuInputData{}

// MenuInputData struct for MenuInputData
type MenuInputData struct {
	// The media (prompt) parameters
	Media *MenuOutputDetailMedia `json:"media,omitempty"`
	// A friendly name for the menu
	Name string `json:"name"`
	// The amount of time (in milliseconds) to wait for the caller to begin entering digits
	Timeout *int32 `json:"timeout,omitempty"`
}

type _MenuInputData MenuInputData

// NewMenuInputData instantiates a new MenuInputData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuInputData(name string) *MenuInputData {
	this := MenuInputData{}
	this.Name = name
	return &this
}

// NewMenuInputDataWithDefaults instantiates a new MenuInputData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuInputDataWithDefaults() *MenuInputData {
	this := MenuInputData{}
	return &this
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *MenuInputData) GetMedia() MenuOutputDetailMedia {
	if o == nil || IsNil(o.Media) {
		var ret MenuOutputDetailMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuInputData) GetMediaOk() (*MenuOutputDetailMedia, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *MenuInputData) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given MenuOutputDetailMedia and assigns it to the Media field.
func (o *MenuInputData) SetMedia(v MenuOutputDetailMedia) {
	o.Media = &v
}

// GetName returns the Name field value
func (o *MenuInputData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MenuInputData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MenuInputData) SetName(v string) {
	o.Name = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *MenuInputData) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuInputData) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *MenuInputData) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *MenuInputData) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o MenuInputData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuInputData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

func (o *MenuInputData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuInputData := _MenuInputData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuInputData)

	if err != nil {
		return err
	}

	*o = MenuInputData(varMenuInputData)

	return err
}

type NullableMenuInputData struct {
	value *MenuInputData
	isSet bool
}

func (v NullableMenuInputData) Get() *MenuInputData {
	return v.value
}

func (v *NullableMenuInputData) Set(val *MenuInputData) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuInputData) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuInputData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuInputData(val *MenuInputData) *NullableMenuInputData {
	return &NullableMenuInputData{value: val, isSet: true}
}

func (v NullableMenuInputData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuInputData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


