/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceCallRecordingSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceCallRecordingSource{}

// ServiceCallRecordingSource struct for ServiceCallRecordingSource
type ServiceCallRecordingSource struct {
	Any *ServiceCallRecordingParameters `json:"any,omitempty"`
	Offnet *ServiceCallRecordingParameters `json:"offnet,omitempty"`
	Onnet *ServiceCallRecordingParameters `json:"onnet,omitempty"`
}

// NewServiceCallRecordingSource instantiates a new ServiceCallRecordingSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceCallRecordingSource() *ServiceCallRecordingSource {
	this := ServiceCallRecordingSource{}
	return &this
}

// NewServiceCallRecordingSourceWithDefaults instantiates a new ServiceCallRecordingSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceCallRecordingSourceWithDefaults() *ServiceCallRecordingSource {
	this := ServiceCallRecordingSource{}
	return &this
}

// GetAny returns the Any field value if set, zero value otherwise.
func (o *ServiceCallRecordingSource) GetAny() ServiceCallRecordingParameters {
	if o == nil || IsNil(o.Any) {
		var ret ServiceCallRecordingParameters
		return ret
	}
	return *o.Any
}

// GetAnyOk returns a tuple with the Any field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCallRecordingSource) GetAnyOk() (*ServiceCallRecordingParameters, bool) {
	if o == nil || IsNil(o.Any) {
		return nil, false
	}
	return o.Any, true
}

// HasAny returns a boolean if a field has been set.
func (o *ServiceCallRecordingSource) HasAny() bool {
	if o != nil && !IsNil(o.Any) {
		return true
	}

	return false
}

// SetAny gets a reference to the given ServiceCallRecordingParameters and assigns it to the Any field.
func (o *ServiceCallRecordingSource) SetAny(v ServiceCallRecordingParameters) {
	o.Any = &v
}

// GetOffnet returns the Offnet field value if set, zero value otherwise.
func (o *ServiceCallRecordingSource) GetOffnet() ServiceCallRecordingParameters {
	if o == nil || IsNil(o.Offnet) {
		var ret ServiceCallRecordingParameters
		return ret
	}
	return *o.Offnet
}

// GetOffnetOk returns a tuple with the Offnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCallRecordingSource) GetOffnetOk() (*ServiceCallRecordingParameters, bool) {
	if o == nil || IsNil(o.Offnet) {
		return nil, false
	}
	return o.Offnet, true
}

// HasOffnet returns a boolean if a field has been set.
func (o *ServiceCallRecordingSource) HasOffnet() bool {
	if o != nil && !IsNil(o.Offnet) {
		return true
	}

	return false
}

// SetOffnet gets a reference to the given ServiceCallRecordingParameters and assigns it to the Offnet field.
func (o *ServiceCallRecordingSource) SetOffnet(v ServiceCallRecordingParameters) {
	o.Offnet = &v
}

// GetOnnet returns the Onnet field value if set, zero value otherwise.
func (o *ServiceCallRecordingSource) GetOnnet() ServiceCallRecordingParameters {
	if o == nil || IsNil(o.Onnet) {
		var ret ServiceCallRecordingParameters
		return ret
	}
	return *o.Onnet
}

// GetOnnetOk returns a tuple with the Onnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceCallRecordingSource) GetOnnetOk() (*ServiceCallRecordingParameters, bool) {
	if o == nil || IsNil(o.Onnet) {
		return nil, false
	}
	return o.Onnet, true
}

// HasOnnet returns a boolean if a field has been set.
func (o *ServiceCallRecordingSource) HasOnnet() bool {
	if o != nil && !IsNil(o.Onnet) {
		return true
	}

	return false
}

// SetOnnet gets a reference to the given ServiceCallRecordingParameters and assigns it to the Onnet field.
func (o *ServiceCallRecordingSource) SetOnnet(v ServiceCallRecordingParameters) {
	o.Onnet = &v
}

func (o ServiceCallRecordingSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceCallRecordingSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Any) {
		toSerialize["any"] = o.Any
	}
	if !IsNil(o.Offnet) {
		toSerialize["offnet"] = o.Offnet
	}
	if !IsNil(o.Onnet) {
		toSerialize["onnet"] = o.Onnet
	}
	return toSerialize, nil
}

type NullableServiceCallRecordingSource struct {
	value *ServiceCallRecordingSource
	isSet bool
}

func (v NullableServiceCallRecordingSource) Get() *ServiceCallRecordingSource {
	return v.value
}

func (v *NullableServiceCallRecordingSource) Set(val *ServiceCallRecordingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCallRecordingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCallRecordingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCallRecordingSource(val *ServiceCallRecordingSource) *NullableServiceCallRecordingSource {
	return &NullableServiceCallRecordingSource{value: val, isSet: true}
}

func (v NullableServiceCallRecordingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCallRecordingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


