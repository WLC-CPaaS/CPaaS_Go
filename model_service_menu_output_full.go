/*
White Label Communications CPaas API Documentation

A CPaaS platform API

API version: 1.1
Contact: support@whitelabelcomm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceMenuOutputFull type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMenuOutputFull{}

// ServiceMenuOutputFull struct for ServiceMenuOutputFull
type ServiceMenuOutputFull struct {
	Id *string `json:"id,omitempty"`
	Media *ServiceMenuOutputFullMedia `json:"media,omitempty"`
	Name *string `json:"name,omitempty"`
	Timeout *int32 `json:"timeout,omitempty"`
}

// NewServiceMenuOutputFull instantiates a new ServiceMenuOutputFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMenuOutputFull() *ServiceMenuOutputFull {
	this := ServiceMenuOutputFull{}
	return &this
}

// NewServiceMenuOutputFullWithDefaults instantiates a new ServiceMenuOutputFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMenuOutputFullWithDefaults() *ServiceMenuOutputFull {
	this := ServiceMenuOutputFull{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceMenuOutputFull) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMenuOutputFull) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceMenuOutputFull) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServiceMenuOutputFull) SetId(v string) {
	o.Id = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *ServiceMenuOutputFull) GetMedia() ServiceMenuOutputFullMedia {
	if o == nil || IsNil(o.Media) {
		var ret ServiceMenuOutputFullMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMenuOutputFull) GetMediaOk() (*ServiceMenuOutputFullMedia, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *ServiceMenuOutputFull) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given ServiceMenuOutputFullMedia and assigns it to the Media field.
func (o *ServiceMenuOutputFull) SetMedia(v ServiceMenuOutputFullMedia) {
	o.Media = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceMenuOutputFull) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMenuOutputFull) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceMenuOutputFull) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceMenuOutputFull) SetName(v string) {
	o.Name = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ServiceMenuOutputFull) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMenuOutputFull) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ServiceMenuOutputFull) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *ServiceMenuOutputFull) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o ServiceMenuOutputFull) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMenuOutputFull) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableServiceMenuOutputFull struct {
	value *ServiceMenuOutputFull
	isSet bool
}

func (v NullableServiceMenuOutputFull) Get() *ServiceMenuOutputFull {
	return v.value
}

func (v *NullableServiceMenuOutputFull) Set(val *ServiceMenuOutputFull) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMenuOutputFull) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMenuOutputFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMenuOutputFull(val *ServiceMenuOutputFull) *NullableServiceMenuOutputFull {
	return &NullableServiceMenuOutputFull{value: val, isSet: true}
}

func (v NullableServiceMenuOutputFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMenuOutputFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


